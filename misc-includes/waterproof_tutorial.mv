# Waterproof Tutorial

Try to solve the exercises below by inspecting the examples. Not sure how to start? You can type **Ctrl + space** or **Command + space** to get a list of possible options.<hint title="üì¶ Import libraries (click to open/close)">
```coq
Require Import Rbase.
Require Import Rfunctions.

Require Import Waterproof.Waterproof.
Require Import Waterproof.Notations.
Require Import Waterproof.Tactics.
Require Import Waterproof.Libs.Analysis.SupAndInf.
Require Import Waterproof.Automation.

Waterproof Enable Automation RealsAndIntegers.

Open Scope R_scope.
Set Default Timeout 5.

Notation "'max(' x , y )" := (Rmax x y)
  (format "'max(' x ,  y ')'").
Notation "'min(' x , y )" := (Rmin x y)
  (format "'min(' x ,  y ')'").
```
</hint>## 1. We conclude that

### Example:
```coq
Lemma example_reflexivity :
  0 = 0.
Proof.
We conclude that (0 = 0).
Qed.
```
### Try it yourself:
```coq
Lemma exercise_reflexivity :
  3 = 3.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 2. We need to show that
Sometimes it is useful to remind the reader or yourself of what you need to show.
### Example
```coq
Lemma example_we_need_to_show_that :
  2 = 2.
Proof.
We need to show that (2 = 2).
We conclude that (2 = 2).
Qed.
```
### Try it yourself
```coq
Lemma exercise_we_need_to_show_that :
  7 = 7.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 3. Show for-all statements: take arbitrary values

### Example:
```coq
Lemma example_take :
  for all x : ‚Ñù,
    x = x.
Proof.
Take x : ‚Ñù.
We conclude that (x = x).
Qed.
```
### Try it yourself:
```coq
Lemma exercise_take :
  for all x : ‚Ñù,
    x + 3 = 3 + x.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 4. Show there-exists statements: choose values
### Example
```coq
Lemma example_choose :
  there exists y : ‚Ñù,
    y < 3.
Proof.
Choose y := (2).
We conclude that (y < 3).
Qed.
```
### Try it yourself
```coq
Lemma exercise_choose :
  there exists z : ‚Ñù,
    10 < z.
Proof.  
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 5. Combine for-all and there-exists statements
### Example
```coq
Lemma example_combine_quantifiers :
  ‚àÄ a : ‚Ñù,
    ‚àÄ b : ‚Ñù,
      ‚àÉ c : ‚Ñù,
        c > b - a.
Proof.
Take a : (‚Ñù).
Take b : (‚Ñù).
Choose c := (b - a + 1).
We conclude that (c > b - a).
Qed.
```
### Try it yourself
```coq
Lemma exercise_combine_quantifiers :
  ‚àÄ x : ‚Ñù,
    ‚àÄ y : ‚Ñù,
      ‚àÉ z : ‚Ñù,
        x < z - y.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 6.  Make an assumption
### Example
```coq
Lemma example_assumptions :
  ‚àÄ a : ‚Ñù,
    a < 0 ‚áí - a > 0.
Proof.
Take a : (‚Ñù).
Assume that (a < 0).
We conclude that (- a > 0).
Qed.
```
### Another example with explicit labels
```coq
Lemma example_assumptions_2 :
  ‚àÄ a : ‚Ñù,
    a < 0 ‚áí - a > 0.
Proof.
Take a : (‚Ñù).
Assume that (a < 0) (i). (* The label here is optional *)
By (i) we conclude that (- a > 0).
Qed.
```
### Try it yourself
```coq
Lemma exercise_assumptions :
  ‚àÄ a : ‚Ñù,
    ‚àÄ b : ‚Ñù,
      a > 0 ‚áí (b > 0 ‚áí a + b > - 1).
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 7. Chains of (in)equalities
### Example
```coq
Section monotone_function.
Variable f : ‚Ñù ‚Üí ‚Ñù.
Parameter f_increasing : ‚àÄ x y : ‚Ñù, x ‚â§ y ‚áí f(x) ‚â§ f(y).

Lemma example_inequalities:
  2 < f(0) ‚áí 2 < f(1).
Proof.
Assume that (2 < f(0)).
By (f_increasing) we conclude that (& 2 < f(0) ‚â§ f(1)).
Qed.
```
### Try it yourself
```coq
Lemma exercise_inequalities:
  f(3) < 5 ‚áí f(-1) < 5.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 8. Backwards reasoning in smaller steps

### Example
```coq
Lemma example_backwards :
  3 < f(0) ‚áí 2 < f(5).
Proof.
Assume that (3 < f(0)).
It suffices to show that (f(0) ‚â§ f(5)).
By (f_increasing) we conclude that (f(0) ‚â§ f(5)).
Qed.
```
### Try it yourself
```coq
Lemma exercise_backwards :
  f(5) < 4 ‚áí f(-2) < 5.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 9. Forwards reasoning in smaller steps
### Example
```coq
Lemma example_forwards :
  7 < f(-1) ‚áí 2 < f(6).
Proof.
Assume that (7 < f(-1)).
By (f_increasing) it holds that (f(-1) ‚â§ f(6)).
We conclude that (2 < f(6)).
Qed.
```
### Try it yourself
```coq
Lemma exercise_forwards :
  f(7) < 8 ‚áí f(3) ‚â§ 10.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```

```coq
End monotone_function.
```
## 10. Use a *for-all* statement
### Example
```coq
Lemma example_use_for_all :
  ‚àÄ x : ‚Ñù,
    (‚àÄ Œµ : ‚Ñù, Œµ > 0 ‚áí x < Œµ) ‚áí
       x + 1/2 < 1.
Proof.
Take x : ‚Ñù.
Assume that (‚àÄ Œµ : ‚Ñù, Œµ > 0 ‚áí x < Œµ) (i).
By (i) it holds that (x < 1/2).
We conclude that (x + 1/2 < 1).
Qed.
```
### Try it yourself
```coq
Lemma exercise_use_for_all:
  ‚àÄ x : ‚Ñù,
    (‚àÄ Œµ : ‚Ñù, Œµ > 0 ‚áí x < Œµ) ‚áí
       10 * x < 1.
      
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 11. Use a *there-exists* statement
### Example
```coq
Lemma example_use_there_exists :
  ‚àÄ x : ‚Ñù,
    (‚àÉ y : ‚Ñù, 10 < y ‚àß y < x) ‚áí
      10 < x.
Proof.
Take x : ‚Ñù.
Assume that (‚àÉ y : ‚Ñù, 10 < y ‚àß y < x) (i).
Obtain such a y.
We conclude that (& 10 < y < x).
Qed.
```
### Another example
```coq
Lemma example_use_there_exists_2 :
  ‚àÄ x : ‚Ñù,
    (‚àÉ y : ‚Ñù, 10 < y ‚àß y < x) ‚áí
      10 < x.
Proof.
Take x : ‚Ñù.
Assume that (‚àÉ y : ‚Ñù, 10 < y ‚àß y < x) (i).
Obtain y according to (i).
We conclude that (& 10 < y < x).
Qed.
```
### Try it yourself
```coq
Lemma exercise_use_there_exists :
  ‚àÄ z : ‚Ñù,
    (‚àÉ x : ‚Ñù, (x < -5) ‚àß (z > x^2)) ‚áí
      25 < z.
      
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 12. Argue by contradiction
### Example
```coq
Lemma example_contradicition :
  ‚àÄ x : ‚Ñù,
    (‚àÄ Œµ : ‚Ñù, Œµ > 0 ‚áí x > 1 - Œµ) ‚áí
      x ‚â• 1.
Proof.
Take x : (‚Ñù).
Assume that (‚àÄ Œµ : ‚Ñù, Œµ > 0 ‚áí x > 1 - Œµ) (i).
We need to show that (x ‚â• 1).
We argue by contradiction.
Assume that (¬¨ (x ‚â• 1)).
It holds that ((1 - x) > 0).
By (i) it holds that (x > 1 - (1 - x)).
Contradiction.
Qed.
```
### Try it yourself
```coq
Lemma exercise_contradiction :
  ‚àÄ x : ‚Ñù,
    (‚àÄ Œµ : ‚Ñù, Œµ > 0 ‚áí x < Œµ)
      ‚áí x ‚â§ 0.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 13. Split into cases
### Example
```coq
Lemma example_cases :
  ‚àÄ x : ‚Ñù, ‚àÄ y : ‚Ñù,
    max(x, y) = x ‚à® max(x, y) = y.
Proof.
```

```coq
Take x : (‚Ñù).
Take y : (‚Ñù).
Either (x < y) or (x ‚â• y).
- Case (x < y).
  It suffices to show that (max(x, y) = y).
  We conclude that (max(x, y) = y).
- Case (x ‚â• y).
  It suffices to show that (max(x, y) = x).
  We conclude that (max(x, y) = x).
Qed.
```
### Try it yourself
```coq
Lemma exercises_cases :
  ‚àÄ x : ‚Ñù, ‚àÄ y : ‚Ñù,
    min(x, y) = x ‚à® min(x, y) = y.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 14. Prove two statements: A ‚àß B
### Example
```coq
Lemma example_both_statements :
  ‚àÄ x : ‚Ñù, x^2 ‚â• 0 ‚àß | x | ‚â• 0.
Proof.
Take x : (‚Ñù).
We show both statements.
* We need to show that (x^2 ‚â• 0).
  We conclude that (x^2 ‚â• 0).
* We need to show that (| x | ‚â• 0).
  We conclude that (| x | ‚â•  0).
Qed.
```
### Try it yourself
```coq
Lemma exercise_both_statements :
  ‚àÄ x : ‚Ñù, 0 * x = 0 ‚àß x + 1 > x.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 15. Show both directions
### Example
```coq
Lemma example_both_directions :
  ‚àÄ x : ‚Ñù, ‚àÄ y : ‚Ñù,
    x < y ‚áî y > x.
Proof.
Take x : (‚Ñù).
Take y : (‚Ñù).
We show both directions.
++ We need to show that (x < y ‚áí y > x).
   Assume that (x < y).
   We conclude that (y > x).
++ We need to show that (y > x ‚áí x < y).
   Assume that (y > x).
   We conclude that (x < y).
Qed.
```
### Try it yourself
```coq
Lemma exercise_both_directions :
  ‚àÄ x : ‚Ñù, x > 1 ‚áî x - 1 > 0.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 16. Proof by induction
### Example
```coq
Lemma example_induction :
  ‚àÄ n : ‚Ñï ‚Üí ‚Ñï, (‚àÄ k : ‚Ñï, (n(k) < n(k+1))%nat) ‚áí 
    ‚àÄ k : ‚Ñï, (k ‚â§ n(k))%nat.
Proof.
Take n : (‚Ñï ‚Üí ‚Ñï).
Assume that (‚àÄ k : ‚Ñï, n(k) < n(k+1))%nat.
We use induction on k.
+ We first show the base case ((0 ‚â§ n(0))%nat).
  We conclude that (0 ‚â§ n(0))%nat.
+ We now show the induction step.
  Assume that (k ‚â§ n(k))%nat.
  It holds that (n(k) < n(k+1))%nat.
  We conclude that (k + 1 ‚â§ n(k + 1))%nat.
Qed.
```
### Try it yourself
```coq
Lemma exercise_induction :
  ‚àÄ F : ‚Ñï ‚Üí ‚Ñï, (‚àÄ k : ‚Ñï, (F(k+1) = F(k))%nat) ‚áí
    ‚àÄ k : ‚Ñï, (F(k) = F(0))%nat.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
## 17. Expand definitions
An alternative approach to what we show below is to use the "Expand definitions" panel that you can access in the Waterproof menu by clicking on the drop on the left-hand side in visual studio.
### Example
```coq
Definition square (x : ‚Ñù) := x^2.
```

```coq
Lemma example_expand :
  ‚àÄ x : ‚Ñù, square x ‚â• 0.
Proof.
Take x : (‚Ñù).
Expand the definition of square in (square x ‚â• 0). 
  (* Remove the above line in your own code! *)
We need to show that (x^2 ‚â• 0).
We conclude that (x^2 ‚â• 0).
Qed.
```
### Try it yourself
```coq
Lemma exercise_expand :
  ‚àÄ x : ‚Ñù, - (square x) ‚â§ 0.
Proof.
```
<input-area>
```coq
(* Type your proof here *)
```
</input-area>
```coq
Qed.
```
