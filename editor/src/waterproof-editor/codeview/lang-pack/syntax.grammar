@top Program { expression* }

@skip { space | BlockComment }

expression {
    Identifier |
    String |
    Boolean |
    Application { "(" expression* ")" } |
    Vernacular |
    Gallina |
    tactics |
    terminators | 
    admitters
}

@tokens {
    Identifier { $[a-zA-Z_\-0-9]+ }

    String { '"' (!["\\] | "\\" _)* '"' }

    Boolean { "#t" | "#f" }

    CommentChar { ![*)] }

    BlockComment { "(*" CommentChar* "*)" }

    space { $[ \t\n\r]+ }

    "(" ")"

    vernacular { "Abort" | "About"| "Add" | "All" | "Arguments" | "Asymmetric" | "Axiom" |
        "Bind" | 
        "Canonical" | "Check" | "Class" | "Close" | "Coercion" | "CoFixpoint" | "Comments" |
        "CoInductive" | "Compute" | "Context" | "Constructors" | "Contextual" | "Corollary" |
        "Defined" | "Definition" | "Delimit" |
        "Fail" |
        "Eval" |
        "End" | "Example" | "Export" |
        "Fact" | "Fixpoint" | "From" |
        "Global" | "Goal" | "Graph" |
        "Hint" | "Hypotheses" | "Hypothesis" |
        "Implicit" | "Implicits" | "Import" | "Inductive" | "Infix" | "Instance" |
        "Lemma" | "Let" | "Local" | "Ltac" |
        "Module" | "Morphism" |
        "Next" | "Notation" |
        "Obligation" | "Open" |
        "Parameter" | "Parameters" | "Prenex" | "Print" | "Printing" | "Program" |
        "Patterns" | "Projections" | "Proof" |
        "Proposition" |
        "Qed" |
        "Record" | "Relation" | "Remark" | "Require" | "Reserved" | "Resolve" | "Rewrite" |
        "Save" | "Scope" | "Search" | "SearchAbout" | "Section" | "Set" | "Show" | "Strict" | "Structure" |
        "Tactic" | "Time" | "Theorem" | "Types" |
        "Unset" |
        "Variable" | "Variables" | "View"
        }

    gallina {
        "as" | "at" |
        "cofix" | "crush" |
        "else" | "end" |
        "False" | "fix" | "for" | "forall" | "fun" |
        "if" | "in" | "is" |
        "let" |
        "match" |
        "of" |
        "Prop" |
        "return" |
        "struct" |
        "then" | "True" | "Type" |
        "when"| "with"
        }

    interpunction { ";" | ":" | "." | "," | "?" | "<" | ">" | "=" | "+" | "!" }
    Vernacular { "" vernacular " " | "" vernacular interpunction }

    Gallina { "" gallina " "| "" gallina interpunction }

    tactics {
        "after" | "apply" | "assert" | "auto" | "autorewrite" |
        "case" | "change"| "clear" | "compute" | "congruence" | "constructor" |
        "congr" | "cut" | "cutrewrite" |
        "dependent" | "destruct" |
        "eapply" | "eassumption" | "eauto" | "econstructor" | "elim"| "exists" |
        "field" | "firstorder" | "fold" | "fourier" |
        "generalize" |
        "have" | "hnf" |
        "induction" | "injection" | "instantiate" | "intro" | "intros" | "inversion" |
        "left" |
        "move" |
        "pattern" | "pose" |
        "refine" | "remember" | "rename" | "repeat" | "replace" | "revert" | "rewrite" |
        "right" | "ring" |
        "set" | "simpl" | "specialize" | "split" | "subst" | "suff" | "symmetry" |
        "transitivity" | "trivial" | "try" |
        "unfold" | "unlock" | "using" |
        "vm_compute" |
        "where" | "wlog"
    }

    terminators {
        "assumption" |
        "by" |
        "contradiction" |
        "discriminate" |
        "easy" |
        "exact" |
        "now" |
        "omega" |
        "reflexivity" |
        "tauto"
    }

    admitters {
        "admit" |
        "Admitted"
    }

    @precedence { BlockComment, String, Gallina, Vernacular, tactics, terminators, admitters, Identifier, space }
}

@detectDelim
