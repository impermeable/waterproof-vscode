@top Program { Sentence* }
// @external tokens TakeInput from "./externalTokens" { TakeInput }


Sentence {
    WaterproofTactic |
    Lemma |
    Statement
}

@skip { space | Comment | ProofandQed}


// Define local token for tactics, whatever is not TacticEnd 
// is just TacticInput
@local tokens {
    TacticEnd[@name='dotSpace'] { '.' }
    // If overlap between tactics is an issue, probably better to create a token per phrase
    // This would mean tactics have to be hardcoded per possible configuration however...
    TacticMiddleByOrSince{"it suffices to show that" | "we" space+ "conclude" space+ "that" | "it holds that" }
    TacticMiddleExpand{" in "}
    TacticMiddleObtain{"according to"}
    TacticMiddleDefine{" := "}
    TacticMiddleBecauseFirst{" both "}
    TacticMiddleBecauseSecond{" and "}
    TacticMiddleEither{" or "}
    @else TacticInput
}

// TODO : Update the space+ addition to all tactics

// Skip WaterproofTactics
@skip {} {
    WaterproofTactic { 
        // Zero Input Tactics
        "Help" TacticEnd | 
        "We argue by contradiction" TacticEnd| 
        "Contradiction" TacticEnd| 
        "We show both statements"  TacticEnd| 
        "We show both directions" TacticEnd|
        "We now show the induction step" TacticEnd|
        // Single Input Tactics
        "Take " TacticInput TacticEnd |
        "We" space+ "need" space+ "to" space+ "show" space+ "that" TacticInput TacticEnd | 
        "We" space+ "conclude" space+ "that" TacticInput TacticEnd | 
        "Case " TacticInput TacticEnd |
        "Assume" space+ "that" TacticInput TacticEnd |
        "Obtain such a " TacticInput TacticEnd | 
        "(& " TacticInput " )." | 
        "It suffices to show that " TacticInput TacticEnd | 
        "It holds that " TacticInput TacticEnd | 
        "It holds that " TacticInput TacticEnd | 
        "We claim that " TacticInput TacticEnd | 
        "We use induction on " TacticInput TacticEnd | 
        "Indeed, " TacticInput TacticEnd |
        "Use " TacticInput TacticEnd |
        "Choose " TacticInput TacticEnd | 
        "We first show the base case " TacticInput TacticEnd | 
        // Multi Input Tactics
        "Expand the definition of " TacticInput TacticMiddleExpand TacticInput TacticEnd | 
        "Obtain " TacticInput TacticMiddleObtain TacticInput TacticEnd | 
        "By " TacticInput TacticMiddleByOrSince TacticInput TacticEnd | 
        "Define " TacticInput TacticMiddleDefine TacticInput TacticEnd | 
        "Since " TacticInput TacticMiddleByOrSince TacticInput TacticEnd | 
        "Because " TacticInput TacticMiddleBecauseFirst TacticInput TacticMiddleBecauseSecond TacticInput TacticEnd | 
        "Either " TacticInput TacticMiddleEither TacticInput TacticEnd
    }
}

@local tokens {
    LemmaEnd[@name='dotSpace'] { '.'}
    @else LemmaStatement
}

// Skip Lemma
@skip {} {
    Lemma {
        "Lemma " LemmaStatement LemmaEnd 
    }
}

@local tokens {
    StatementEnd[@name='dotSpace'] { '.'}
    @else StatementInput
}

// Skip Statement
@skip {} {
    Statement {
        "Require Import " StatementInput StatementEnd space |
        "Waterproof " StatementInput StatementEnd space |
        "Set Default " StatementInput StatementEnd space |
        "Open Scope " StatementInput StatementEnd space |
        "Notation " StatementInput StatementEnd space |
        "Section " StatementInput StatementEnd space |
        "Variable " StatementInput StatementEnd space |
        "Parameter " StatementInput StatementEnd space 
    }
}

// Remaining tokens
@tokens {
    Comment { "(*" ![*]* "*)" }

    space { " " | "\t" | "\n" | "\r" }

    ProofandQed {"Proof" | "Qed"} 

    //TacticInput { ![.]+ } // Exclude overlapping characters explicitly
}

@detectDelim